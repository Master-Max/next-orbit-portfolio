import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
// import styles from '@/styles/Home.module.css'
// const inter = Inter({ subsets: ['latin'] })
import SolarSystemBg from './solarSystemBg'
import Asteroids from '@/components/game/Asteroids'

import AsteroidScore from '@/models/asteroidScoreModel'
import connectMongo from '@/lib/connectMongo'

import { useState, useEffect } from 'react'

export async function getServerSideProps(context) {

  let props = {};

  try{
    await connectMongo();

    let tmpScores = await AsteroidScore.find();

    console.log(tmpScores);

    let sortedScores = tmpScores.sort((a, b) => b.score - a.score);

    console.log(sortedScores);

    while(sortedScores.length < 10){
      sortedScores.push({player_name: '___', score: 0})
    }

    sortedScores.length = 10;

    props = {scores: JSON.stringify(sortedScores)};


  }catch(error){

  }


  return {
    props
  }
}

export default function TmpIndex({scores}) {

  console.log(scores);

  let allScores = [];
  
  try{
    allScores = JSON.parse(scores);
  }catch(error){
    allScores = [{player_name: 'ERROR', score: 0}]
  }


  console.log(allScores)

  const [newAllScores, setNewAllScores] = useState(allScores)

  // const [z, setZ] = useState(25)
  // const [tt, setTT] = useState();

  let ttt = null;

  let z = 25;
  let y = 0;

  useEffect(() => {
    const onScroll = () => getScroll();
    // setTT(document.body.getBoundingClientRect().top)
    // setZ(getScroll());
    // clean up code
    window.removeEventListener('scroll', onScroll);
    window.addEventListener('scroll', onScroll, { passive: true });
    ttt = 25 + (document.body.getBoundingClientRect().top * -0.15);
    // setTT(25 + (document.body.getBoundingClientRect().top * -0.15));
    return () => window.removeEventListener('scroll', onScroll);

  }, []);

  // const t = document.body.getBoundingClientRect().top;

  const getScroll = () => {
    const t = document.body.getBoundingClientRect().top;
    // setTT(document.body.getBoundingClientRect().top);
    z = 25 + (t * -0.15);
    y = t * -0.08;
    // console.log('Scrollilng Haha')
    // console.log(z);
  }

  const getCameraPos = () => {
    return([0,y,z])
  }
  
  const generateLeaderboard = (scores) => {
    return(
      <div className='grid place-items-center'>
          <h3 className='text-5xl text-white mb-2'>LEADERBOARD</h3>
            {scores.map((item, index) => {return(
              <div key={`${index}-${item.player_name}`}
                className='grid grid-cols-3 gap-4'
              >
                <p className='text-white text-xl'>{index+1}.</p>
                <p className='text-white text-xl w-16'>{item.player_name}</p>
                <p className='text-white text-xl'>{item.score}</p>
              </div>
            )})}
          </div>
    )
  }

  return (
    <>
      <Head>
        <title>Max Petersen</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=''>
        <div className='h-[200vh] relative z-20' onScroll={getScroll}>
          <h2 className='pt-20 text-white'>HIIII</h2>
          {(ttt!=null)? <p className='text-white'>Yes</p>:<p className='text-white'>No</p>}
        </div>
        <h1 className='relative font-bold text-3xl z-10 text-red-500'>Test</h1>
        
        {/* {(tt != undefined)? <p className='text-white'>Yayy</p> :<p className='text-white'>Nooo</p>} */}
        
        <div className='relative z-20 h-[100vh] w-full'>
          
          {/* {generateLeaderboard()} */}
          <div className='z-50'>
            {/* <Asteroids/> */}
          </div>
        </div>
        {/* <div className='relative z-10 h-[100vh] w-full'>
          <div className='grid h-full w-full place-items-center'>
            <div className='z-50'>
              {generateLeaderboard()}
            </div>
            <canvas className='absolute top-0 left-0 z-10' id='game-canvas'></canvas>
            <Asteroids/>
          </div>
        </div> */}
        <Asteroids generateLeaderboard={generateLeaderboard} allScores={newAllScores} setNewAllScores={setNewAllScores}/>


        <SolarSystemBg getCameraPos={getCameraPos} t={ttt}/>
      </main>
    </>
  )
}
